{"/home/travis/build/npmtest/node-npmtest-maxmind-db-reader/test.js":"/* istanbul instrument in package npmtest_maxmind_db_reader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-maxmind-db-reader/lib.npmtest_maxmind_db_reader.js":"/* istanbul instrument in package npmtest_maxmind_db_reader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_maxmind_db_reader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_maxmind_db_reader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-maxmind-db-reader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-maxmind-db-reader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_maxmind_db_reader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_maxmind_db_reader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_maxmind_db_reader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_maxmind_db_reader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_maxmind_db_reader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_maxmind_db_reader.__dirname + '/lib.npmtest_maxmind_db_reader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-maxmind-db-reader/node_modules/maxmind-db-reader/index.js":"'use strict';\r\n\r\nvar Reader = require('./lib/Reader.js');\r\n\r\nmodule.exports = MaxmindDBReader;\r\n\r\nfunction MaxmindDBReader() {\r\n\t// allow creation without 'new' keyword\r\n\tif (!(this instanceof MaxmindDBReader))\r\n\t\treturn new MaxmindDBReader();\r\n}\r\n\r\nMaxmindDBReader.open = function openAsync(database, callback) {\r\n    Reader.open(database, function(err, reader){\r\n        if(err){\r\n            return callback(err);\r\n        }\r\n        var mmdbreader = MaxmindDBReader();\r\n        mmdbreader.reader = reader;\r\n        callback(null,mmdbreader);\r\n    });\r\n};\r\n\r\nMaxmindDBReader.openSync = function openSync(database) {\r\n    var mmdbreader = MaxmindDBReader();\r\n    mmdbreader.reader = Reader.openSync(database);\r\n    return mmdbreader;\r\n};\r\n\r\nMaxmindDBReader.prototype.getGeoData = function getGeoData(ipAddress, callback) {\r\n    this.reader.get(ipAddress, callback);\r\n};\r\n\r\nMaxmindDBReader.prototype.getGeoDataSync = function getGeoDataSync(ipAddress) {\r\n    return this.reader.getSync(ipAddress);\r\n};\r\n\r\nMaxmindDBReader.prototype.getDatabaseMetadata = function getDatabaseMetadata() {\r\n    return this.reader.getMetadata();\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-maxmind-db-reader/node_modules/maxmind-db-reader/lib/Reader.js":"'use strict';\n\nvar DATA_SECTION_SEPARATOR_SIZE = 16,\n    METADATA_START_MARKER = new Buffer('ABCDEF4D61784D696E642E636F6D', 'hex'),\n    fs = require('fs'),\n    Metadata = require('./Metadata.js'),\n    Decoder = require('./Decoder.js'),\n    IPParser = require('./IPParser.js');\n\nmodule.exports = Reader;\n\nfunction Reader() {\n}\n\nReader.open = function openAsync(database, callback) {\n    var reader = new Reader();\n    var start, metadataDecoder;\n    fs.readFile(database, function db(err, data) {\n        if (err) {\n            return (callback && callback(err));\n        }\n        reader.fileHandle = data;\n        start = reader.findMetadataStart(reader.fileHandle);\n        metadataDecoder = new Decoder(reader.fileHandle, 0);\n        metadataDecoder.decode(start, function decoded(err, metadata) {\n            if (err) {\n                return (callback && callback(err, null));\n            }\n            reader.metadata = new Metadata(metadata[0]);\n            reader.decoder = new Decoder(reader.fileHandle, reader.metadata.getSearchTreeSize() + DATA_SECTION_SEPARATOR_SIZE);\n            callback && callback(null, reader);\n        });\n    });\n};\n\nReader.openSync = function openSync(database) {\n    var reader = new Reader();\n    var start, metadataDecoder, metadataArray;\n\n    reader.fileHandle = fs.readFileSync(database);\n\n    start = reader.findMetadataStart(reader.fileHandle);\n    metadataDecoder = new Decoder(reader.fileHandle, 0);\n    metadataArray = metadataDecoder.decodeSync(start);\n    reader.metadata = new Metadata(metadataArray[0]);\n    reader.decoder = new Decoder(reader.fileHandle, reader.metadata.getSearchTreeSize() + DATA_SECTION_SEPARATOR_SIZE);\n    return reader;\n};\n\nReader.prototype.findMetadataStart = function findMetadataStart(file) {\n    var found = 0,\n        mlen = METADATA_START_MARKER.length - 1,\n        fsize = file.length - 1\n        ;\n    while (found <= mlen && fsize-- > 0) {\n        found += (file[fsize] === METADATA_START_MARKER[mlen - found]) ? 1 : -found;\n    }\n    return fsize + found;\n};\n\nReader.prototype.getSync = function getSync(ipAddress) {\n    var pointer = this.findAddressInTree(ipAddress);\n    return (pointer === 0) ? null : this.resolveDataPointerSync(pointer);\n};\n\nReader.prototype.get = function get(ipAddress, callback) {\n    var pointer = this.findAddressInTree(ipAddress);\n    if (pointer === 0) {\n        process.nextTick(function () {\n            callback(null, null);\n        });\n    } else {\n        this.resolveDataPointer(pointer, callback);\n    }\n};\n\nReader.prototype.findAddressInTree = function findAddressInTree(ipAddress) {\n    var bit, tempBit, record,\n        rawAddress = IPParser(ipAddress),\n        countRaw = rawAddress.length,\n        isIp4AddressInIp6Db = (countRaw === 4 && this.metadata.getIpVersion() === 6),\n        ipStartBit = isIp4AddressInIp6Db ? 96 : 0,\n        nodeNum = 0,\n        i = 0,\n        len = countRaw * 8 + ipStartBit\n        ;\n\n    for (i; i < len; i++) {\n        bit = 0;\n\n        if (i >= ipStartBit) {\n            tempBit = 0xFF & rawAddress[parseInt((i - ipStartBit) / 8, 10)];\n            bit = 1 & (tempBit >> 7 - (i % 8));\n        }\n\n        record = this.readNode(nodeNum, bit);\n\n        if (record === this.metadata.getNodeCount()) {\n            return 0;\n        }\n\n        if (record > this.metadata.getNodeCount()) {\n            return record;\n        }\n\n        nodeNum = record;\n    }\n\n    return null;\n};\n\nReader.prototype.readNode = function readNode(nodeNumber, index) {\n    var bytes, middle,\n        buffer = new Buffer(4),\n        baseOffset = nodeNumber * this.metadata.getNodeByteSize()\n        ;\n\n    buffer.fill(0);\n\n    switch (this.metadata.getRecordSize()) {\n        case 24:\n            bytes = baseOffset + index * 3;\n            this.fileHandle.copy(buffer, 1, bytes, bytes + 3);\n            return buffer.readUInt32BE(0, true);\n        case 28:\n            middle = this.fileHandle.readUInt8(baseOffset + 3, true);\n            middle = (index === 0) ? (0xF0 & middle) >> 4 : 0x0F & middle;\n            bytes = baseOffset + index * 4;\n            this.fileHandle.copy(buffer, 1, bytes, bytes + 3);\n            buffer.writeUInt8(middle, 0);\n            return buffer.readUInt32BE(0, true);\n        case 32:\n            return this.fileHandle.readUInt32BE(baseOffset + index * 4, true);\n        default:\n            throw new Error(\"MaxmindDBReader: Unknown Recordsize in DB\");\n    }\n};\n\nReader.prototype.resolveDataPointerSync = function resolveDataPointerSync(pointer) {\n    var resolved = pointer - this.metadata.getNodeCount() + this.metadata.getSearchTreeSize();\n\n    return this.decoder.decodeSync(resolved)[0];\n};\n\nReader.prototype.resolveDataPointer = function resolveDataPointer(pointer, callback) {\n    var resolved = pointer - this.metadata.getNodeCount() + this.metadata.getSearchTreeSize();\n\n    this.decoder.decode(resolved, function (err, data) {\n        if (err) return callback(err);\n        callback(null, data[0]);\n    });\n};\n\nReader.prototype.getMetadata = function metadata() {\n    return this.metadata;\n};\n","/home/travis/build/npmtest/node-npmtest-maxmind-db-reader/node_modules/maxmind-db-reader/lib/Metadata.js":"'use strict';\r\n\r\nmodule.exports = Metadata;\r\n\r\nfunction Metadata(metadata) {\r\n    this.binaryFormatMajorVersion = metadata.binary_format_major_version;\r\n    this.binaryFormatMinorVersion = metadata.binary_format_minor_version;\r\n    this.buildEpoch               = new Date(metadata.build_epoch*1000);\r\n    this.databaseType             = metadata.database_type;\r\n    this.languages                = metadata.languages;\r\n    this.description              = metadata.description;\r\n    this.ipVersion                = metadata.ip_version;\r\n    this.nodeCount                = metadata.node_count;\r\n    this.recordSize               = metadata.record_size;\r\n    this.nodeByteSize             = this.recordSize / 4;\r\n    this.searchTreeSize           = this.nodeCount * this.nodeByteSize;\r\n}\r\n\r\nMetadata.prototype.getBinaryFormatMajorVersion = function getBinaryFormatMajorVersion() {\r\n    return this.binaryFormatMajorVersion;\r\n};\r\n\r\nMetadata.prototype.getBinaryFormatMinorVersion = function getBinaryFormatMinorVersion() {\r\n    return this.binaryFormatMinorVersion;\r\n};\r\n\r\nMetadata.prototype.getBuildEpoch = function getBuildEpoch() {\r\n    return this.buildEpoch;\r\n};\r\n\r\nMetadata.prototype.getDatabaseType = function getDatabaseType() {\r\n    return this.databaseType;\r\n};\r\n\r\nMetadata.prototype.getLanguages = function getLanguages() {\r\n    return this.languages;\r\n};\r\n\r\nMetadata.prototype.getDescription = function getDescription() {\r\n    return this.description;\r\n};\r\n\r\nMetadata.prototype.getIpVersion = function getIpVersion() {\r\n    return this.ipVersion;\r\n};\r\n\r\nMetadata.prototype.getNodeCount = function getNodeCount() {\r\n    return this.nodeCount;\r\n};\r\n\r\nMetadata.prototype.getRecordSize = function getRecordSize() {\r\n    return this.recordSize;\r\n};\r\n\r\nMetadata.prototype.getNodeByteSize = function getNodeByteSize() {\r\n    return this.nodeByteSize;\r\n};\r\n\r\nMetadata.prototype.getSearchTreeSize = function getSearchTreeSize() {\r\n    return this.searchTreeSize;\r\n};","/home/travis/build/npmtest/node-npmtest-maxmind-db-reader/node_modules/maxmind-db-reader/lib/Decoder.js":"'use strict';\n\nvar bigInt = require('big-integer');\n\nmodule.exports = Decoder;\n\nfunction Decoder(fileStream, pointerBase) {\n    this.fileStream = fileStream;\n    this.pointerBase = pointerBase || 0;\n    this.types = [\n        'extended',         //  0\n        'pointer',          //  1\n        'utf8_string',      //  2\n        'double',           //  3\n        'bytes',            //  4\n        'uint16',           //  5\n        'uint32',           //  6\n        'map',              //  7\n        'int32',            //  8\n        'uint64',           //  9\n        'uint128',          // 10\n        'array',            // 11\n        'container',        // 12\n        'end_marker',       // 13\n        'boolean',          // 14\n        'float'             // 15\n    ];\n    this.pointerValueOffset = [0, 0, 2048, 526336, 0];\n}\n\nDecoder.prototype.decode = function decode(offset, callback, nexttick) {\n    var tmp,\n        that = this,\n        ctrlByte = this.fileStream[offset++],\n        type = this.types[ctrlByte >> 5]\n        ;\n\n    if (type === 'pointer') {\n        tmp = this.decodePointer(ctrlByte, offset);\n        this.decode(tmp[0], function (err, data) {\n            if (err) return callback(err);\n            callback(null, [data[0], tmp[1]]);\n        }, nexttick);\n        return;\n    }\n\n    if (type === 'extended') {\n        tmp = this.fileStream[offset] + 7;\n\n        if (tmp < 8) {\n            return callback(new Error('MaxmindDBReader: Invalid Extended Type at offset:' + offset));\n        }\n\n        type = this.types[tmp];\n        offset++;\n    }\n\n    tmp = this.sizeFromCtrlByte(ctrlByte, offset);\n    if (nexttick === false)\n        this.decodeByType(type, tmp[1], tmp[0], callback);\n    else\n        process.nextTick(function () {\n            that.decodeByType(type, tmp[1], tmp[0], callback);\n        });\n};\n\nDecoder.prototype.decodeByType = function decodeByType(type, offset, size, callback) {\n    var newOffset = offset + size,\n        bytes = this.read(offset, size)\n        ;\n\n    switch (type) {\n        case 'map':\n            return this.decodeMap(size, offset, callback);\n        case 'array':\n            return this.decodeArray(size, offset, callback);\n        case 'boolean':\n            return callback(null, [this.decodeBoolean(size), offset]);\n        case 'utf8_string':\n            return callback(null, [this.decodeString(bytes), newOffset]);\n        case 'double':\n            return callback(null, [this.decodeDouble(bytes), newOffset]);\n        case 'float':\n            return callback(null, [this.decodeFloat(bytes), newOffset]);\n        case 'bytes':\n            return callback(null, [bytes, newOffset]);\n        case 'uint16':\n            return callback(null, [this.decodeUint16(bytes), newOffset]);\n        case 'uint32':\n            return callback(null, [this.decodeUint32(bytes), newOffset]);\n        case 'int32':\n            return callback(null, [this.decodeInt32(bytes), newOffset]);\n        case 'uint64':\n            return callback(null, [this.decodeUint64(bytes), newOffset]);\n        case 'uint128':\n            return callback(null, [this.decodeUint128(bytes), newOffset]);\n    }\n    callback(new Error(\"MaxmindDBReader: Unknown or unexpected type: \" + type + ' at offset:' + offset));\n};\n\nDecoder.prototype.decodeSync = function decodeSync(offset) {\n    var tmp,\n        ctrlByte = this.fileStream[offset++],\n        type = this.types[ctrlByte >> 5]\n        ;\n\n    if (type === 'pointer') {\n        tmp = this.decodePointer(ctrlByte, offset);\n        return [this.decodeSync(tmp[0])[0], tmp[1]];\n    }\n\n    if (type === 'extended') {\n        tmp = this.fileStream[offset] + 7;\n\n        if (tmp < 8) {\n            throw new Error('MaxmindDBReader: Invalid Extended Type at offset:' + offset);\n        }\n\n        type = this.types[tmp];\n        offset++;\n    }\n\n    tmp = this.sizeFromCtrlByte(ctrlByte, offset);\n\n    return this.decodeByTypeSync(type, tmp[1], tmp[0]);\n};\n\nDecoder.prototype.decodeByTypeSync = function decodeByTypeSync(type, offset, size) {\n    var newOffset = offset + size,\n        bytes = this.read(offset, size)\n        ;\n\n    switch (type) {\n        case 'map':\n            return this.decodeMapSync(size, offset);\n        case 'array':\n            return this.decodeArraySync(size, offset);\n        case 'boolean':\n            return [this.decodeBoolean(size), offset];\n        case 'utf8_string':\n            return [this.decodeString(bytes), newOffset];\n        case 'double':\n            return [this.decodeDouble(bytes), newOffset];\n        case 'float':\n            return [this.decodeFloat(bytes), newOffset];\n        case 'bytes':\n            return [bytes, newOffset];\n        case 'uint16':\n            return [this.decodeUint16(bytes), newOffset];\n        case 'uint32':\n            return [this.decodeUint32(bytes), newOffset];\n        case 'int32':\n            return [this.decodeInt32(bytes), newOffset];\n        case 'uint64':\n            return [this.decodeUint64(bytes), newOffset];\n        case 'uint128':\n            return [this.decodeUint128(bytes), newOffset];\n        default:\n            throw new Error(\"MaxmindDBReader: Unknown or unexpected type: \" + type + ' at offset:' + offset);\n    }\n};\n\nDecoder.prototype.read = function read(offset, numberOfBytes) {\n    var buf;\n\n    if (numberOfBytes === 0) {\n        return new Buffer(0);\n    }\n\n    if (numberOfBytes === 1) {\n        return new Buffer([this.fileStream[offset]]);\n    }\n\n    buf = new Buffer(numberOfBytes);\n    buf.fill(0);\n\n    this.fileStream.copy(buf, 0, offset, offset + numberOfBytes);\n\n    return buf;\n};\n\nDecoder.prototype.sizeFromCtrlByte = function sizeFromCtrlByte(ctrlByte, offset) {\n    var size = ctrlByte & 0x1f,\n        bytesToRead = size < 29 ? 0 : size - 28,\n        bytes = this.read(offset, bytesToRead),\n        decoded = this.decodeUint32(bytes)\n        ;\n\n    if (size === 29) {\n        size = 29 + decoded;\n    } else if (size === 30) {\n        size = 285 + decoded;\n    } else if (size > 30) {\n        size = (decoded & (0x0FFFFFFF >> (32 - (8 * bytesToRead)))) + 65821;\n    }\n\n    return [size, offset + bytesToRead];\n};\n\nDecoder.prototype.decodePointer = function decodePointer(ctrlByte, offset) {\n    var packed, pointer,\n        pointerSize = ((ctrlByte >> 3) & 0x3) + 1,\n        buffer = this.read(offset, pointerSize)\n        ;\n\n    offset += pointerSize;\n\n    packed = (pointerSize === 4) ? buffer : Buffer.concat([new Buffer([ctrlByte & 0x7]), buffer], buffer.length + 1);\n\n    pointer = this.decodeUint32(packed) + this.pointerBase + this.pointerValueOffset[pointerSize];\n\n    return [pointer, offset];\n};\n\nDecoder.prototype.decodeArray = function decodeArray(size, offset, callback) {\n    var that = this;\n    process.nextTick(function () {\n        var tmp,\n            i = 1,\n            array = [],\n            cb = function (err, tmp) {\n                if (err) {\n                    return callback(err);\n                }\n                offset = tmp[1];\n                array.push(tmp[0]);\n                if (i++ < size) {\n                    that.decode(offset, cb, i % 20 === 0);\n                } else {\n                    callback(null, [array, offset]);\n                }\n            };\n        if (size === 0) callback(null, [[], offset]);\n        that.decode(offset, cb, false);\n    });\n};\n\nDecoder.prototype.decodeArraySync = function decodeArraySync(size, offset) {\n    var tmp,\n        i = 0,\n        array = []\n        ;\n\n    for (i; i < size; i++) {\n        tmp = this.decodeSync(offset);\n        offset = tmp[1];\n        array.push(tmp[0]);\n    }\n\n    return [array, offset];\n};\n\nDecoder.prototype.decodeBoolean = function decodeBoolean(size) {\n    return (size !== 0);\n};\n\nDecoder.prototype.decodeDouble = function decodeDouble(bits) {\n    return bits.readDoubleBE(0, true);\n};\n\nDecoder.prototype.decodeFloat = function decodeFloat(bits) {\n    return bits.readFloatBE(0, true);\n};\n\nDecoder.prototype.decodeMap = function decodeMap(size, offset, callback) {\n    var that = this;\n    process.nextTick(function () {\n        var tmp, key,\n            map = {},\n            i = 1,\n            cb = function (err, tmp) {\n                if (err) {\n                    return callback(err);\n                }\n                map[key] = tmp[0];\n                offset = tmp[1];\n                if (i++ < size) {\n                    tmp = that.decodeSync(offset);\n                    key = tmp[0].toString();\n                    that.decode(tmp[1], cb, i % 20 === 0);\n                } else {\n                    callback(null, [map, offset]);\n                }\n            };\n        if (size === 0) return callback(null, [{}, offset]);\n        tmp = that.decodeSync(offset);\n        key = tmp[0].toString();\n        that.decode(tmp[1], cb, false);\n    });\n};\n\nDecoder.prototype.decodeMapSync = function decodeMapSync(size, offset) {\n    var tmp, key,\n        map = {},\n        i = 0\n        ;\n\n    for (i; i < size; i++) {\n        tmp = this.decodeSync(offset);\n        key = tmp[0].toString();\n        tmp = this.decodeSync(tmp[1]);\n        offset = tmp[1];\n        map[key] = tmp[0];\n    }\n\n    return [map, offset];\n};\n\nDecoder.prototype.decodeUint16 = function decodeUint16(bytes) {\n    return this.decodeUint32(bytes);\n};\n\nDecoder.prototype.decodeInt32 = function decodeInt32(bytes) {\n    return bytes.readInt32BE(0, true);\n};\n\nDecoder.prototype.decodeUint32 = function decodeUint32(bytes) {\n    var buffer = new Buffer(4);\n\n    buffer.fill(0);\n    bytes.copy(buffer, 4 - bytes.length);\n\n    return buffer.readUInt32BE(0, true);\n};\n\nDecoder.prototype.decodeUint64 = function decodeUint64(bytes) {\n    return this.decodeBigUint(bytes, 8);\n};\n\nDecoder.prototype.decodeUint128 = function decodeUint128(bytes) {\n    return this.decodeBigUint(bytes, 16);\n};\n\nDecoder.prototype.decodeBigUint = function decodeBigUint(bytes, size) {\n    var buffer,\n        i = 0,\n        integer = 0,\n        numberOfLongs = size / 4\n        ;\n\n    buffer = new Buffer(size);\n    buffer.fill(0);\n    bytes.copy(buffer, size - bytes.length);\n\n    for (i; i < numberOfLongs; i++) {\n        integer = bigInt(integer).multiply(4294967296).add(buffer.readUInt32BE(i << 2, true));\n    }\n\n    return integer.toString();\n};\n\nDecoder.prototype.decodeString = function decodeString(bytes) {\n    return bytes.toString('utf8');\n};\n","/home/travis/build/npmtest/node-npmtest-maxmind-db-reader/node_modules/maxmind-db-reader/lib/IPParser.js":"'use strict';\n\nvar IPAddress = require('./IPAddress');\n\nmodule.exports = IPParser;\n\nfunction IPParser(ip) {\n    if (ip.indexOf('.') !== -1) {\n        return IPParser.parseIPv4(ip);\n    } else {\n        return IPParser.parseIPv6(ip);\n    }\n}\n\nIPParser.parseIPv4 = function parseIPv4(ip) {\n    return ipv4Buffer(IPAddress.parseIPv4(ip));\n};\n\nIPParser.parseIPv6 = function parseIPv6(ip) {\n    return ipv6Buffer(IPAddress.parseIPv6(ip));\n};\n\nfunction ipv4Buffer(groups) {\n    var arr = new Buffer(4);\n    arr.fill(0);\n    groups.forEach(function part(nr, i) {\n        arr[i] = parseInt(nr);\n    });\n    return arr;\n}\n\nfunction ipv6Buffer(groups) {\n    var arr = new Buffer(16);\n    arr.fill(0);\n    groups.forEach(function part(hex, i) {\n        if (hex == \"\") return;\n        if (hex.length < 4) {\n            hex = repeat('0', 4 - hex.length) + hex;\n        }\n        arr.write(hex, i * 2, 'hex');\n    });\n    return arr;\n}\n\nfunction repeat(c, l) {\n    var str = \"\", i = 0;\n    while (i++ < l)str += c;\n    return str;\n}\n","/home/travis/build/npmtest/node-npmtest-maxmind-db-reader/node_modules/maxmind-db-reader/lib/IPAddress.js":"'use strict';\n\nvar IPv6 = require('ip-address').v6;\nvar IPv4 = require('ip-address').v4;\n\nexports.parseIPv4 = function parseIPv4(ip) {\n    var v4Address = new IPv4.Address(ip);\n    if (!v4Address.isValid()) {\n        throw new Error(\"Invalid IPv4 address\");\n    }\n    return v4Address.parsedAddress;\n};\n\nexports.parseIPv6 = function parseIPv6(ip) {\n    var v6Address = new IPv6.Address(ip);\n    if (!v6Address.isValid()) {\n        throw new Error(\"Invalid IPv6 address\");\n    }\n    return v6Address.parsedAddress;\n};\n"}